// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Rol {
    id        Int       @id @default(autoincrement())
    nombre    String    @unique @db.VarChar(20)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Usuario   Usuario[]

    @@map("roles")
}

model Usuario {
    id             String   @id @default(cuid()) @db.Char(36)
    nombres        String   @db.VarChar(255)
    apellidos      String   @db.VarChar(255)
    tipo_documento String?  @db.VarChar(50)
    documento      String?  @unique @db.VarChar(50)
    email          String   @unique @db.VarChar(255)
    celular        String   @db.VarChar(20)
    activo         Boolean  @default(false)
    password       String
    rol_id         Int      @default(3)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    PasswordResetToken PasswordResetToken[]
    rol                Rol                  @relation(fields: [rol_id], references: [id], onDelete: Cascade)
    Propiedad          Propiedad[]
    Favorito           Favorito[]
    RecientementeVisto RecientementeVisto[]

    @@index([rol_id], map: "usuarios_rol_id_fkey")
    @@map("usuarios")
}

model PasswordResetToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    expiresAt DateTime
    userId    String
    createdAt DateTime @default(now())
    user      Usuario  @relation(fields: [userId], references: [id])

    @@index([userId], map: "password_reset_tokens_userId_fkey")
    @@map("password_reset_tokens")
}

model Ciudades {
    id          Int         @id @default(autoincrement())
    nombre      String
    descripcion String      @db.VarChar(30)
    imagen      String
    coordenadas String      @db.VarChar(100)
    Propiedad   Propiedad[]

    @@map("ciudades")
}

model TipoPropiedad {
    id        String      @id @default(uuid())
    nombre    String
    imagen    String
    icono     String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    Propiedad Propiedad[]

    @@map("tipo_propiedades")
}

model Propiedad {
    id               String         @id @default(uuid())
    titulo           String
    slug             String?
    descripcionLarga String         @db.LongText
    descripcionCorta String?
    direccion        String
    precio           Float
    video            String?
    coordenadas      String?
    usuario          Usuario        @relation(fields: [idUser], references: [id])
    disponibilidad   Disponibilidad
    exclusivo        Boolean        @default(false)
    tipoPropiedad    TipoPropiedad  @relation(fields: [tipoPropiedadId], references: [id])
    tipoPropiedadId  String
    ciudadId         Int
    ciudad           Ciudades       @relation(fields: [ciudadId], references: [id])
    estado           Estado
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    // Relación “Portada” (varias imágenes pueden servir de portada, si lo deseas)
    fondoPortada     Imagen[]       @relation("PropiedadFondoPortada")

    // Relación “Galería”
    imagenes           Imagen[]             @relation("PropiedadImagenes")
    idUser             String               @db.Char(36)
    Favorito           Favorito[]
    RecientementeVisto RecientementeVisto[]

    @@map("propiedades")
}

model Imagen {
    id                Int        @id @default(autoincrement())
    url               String
    /// FK para la relación “imagenes” (galería)
    propiedadImagenId String?
    propiedadImagen   Propiedad? @relation("PropiedadImagenes", fields: [propiedadImagenId], references: [id], map: "FK_imagen_propiedadImagen")

    /// FK para la relación “fondoPortada”
    propiedadFondoPortadaId String?
    propiedadFondoPortada   Propiedad? @relation("PropiedadFondoPortada", fields: [propiedadFondoPortadaId], references: [id], map: "FK_imagen_propiedadFondo")

    @@map("imagenes_propiedades")
}

model Favorito {
    id          Int      @id @default(autoincrement())
    userId      String
    propiedadId String
    createdAt   DateTime @default(now())

    user      Usuario   @relation(fields: [userId], references: [id])
    propiedad Propiedad @relation(fields: [propiedadId], references: [id])

    @@unique([userId, propiedadId])
}

enum Disponibilidad {
    EN_COMPRA
    EN_VENTA
    EN_ALQUILER
}

enum Estado {
    EN_REVISION
    PUBLICADO
    RECHAZADO
    OCULTO
}

model RecientementeVisto {
    id          String   @id @default(cuid())
    propiedadId String
    userId      String
    vistaEn     DateTime @default(now())

    propiedad Propiedad @relation(fields: [propiedadId], references: [id], onDelete: Cascade)
    user      Usuario   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([propiedadId, userId])
    @@index([userId])

    @@map("recientemente_visto")
}
